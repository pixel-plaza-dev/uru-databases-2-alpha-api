// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  email                   String
  secondaryEmail          String?
  username                String                   @unique
  firstName               String
  lastName                String
  password                String
  address                 String?
  phone                   String?
  birthDate               DateTime?
  deleted                 Boolean                  @default(false)
  jwtRefreshTokens        JwtRefreshToken[]
  roles                   UserRole[]
  usernameHistory         UsernameHistory[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  passwordHistory         PasswordHistory[]
  targetHistory           UserRoleHistory[]        @relation(name: "target")
  triggeredByHistory      UserRoleHistory[]        @relation(name: "triggeredBy")
  loginAttempts           UserLoginAttempt[]
}

model UserLoginAttempt {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  user         User             @relation(fields: [userId], references: [id])
  userId       String           @db.ObjectId
  ip           String
  userAgent    String
  createdAt    DateTime         @default(now())
  successful   Boolean
  refreshToken JwtRefreshToken?
}

model EmailVerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String    @unique @default(uuid()) @map("_uuid")
  email      String
  expiresAt  DateTime  @default(now())
  createdAt  DateTime  @default(now())
  revokedAt  DateTime?
  verifiedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
}

model PasswordResetToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid      String    @unique @default(uuid()) @map("_uuid")
  email     String
  expiresAt DateTime  @default(now())
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
}

model UsernameHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
}

model PasswordHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  password   String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
}

model JwtAccessToken {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  token           String           @unique
  expiresAt       DateTime         @default(now())
  createdAt       DateTime         @default(now())
  lastUsedAt      DateTime         @default(now())
  revokedAt       DateTime?
  jwtRefreshToken JwtRefreshToken?
}

model JwtRefreshToken {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  token                   String            @unique
  expiresAt               DateTime          @default(now())
  createdAt               DateTime          @default(now())
  usedAt                  DateTime          @default(now())
  revokedAt               DateTime?
  jwtAccessToken          JwtAccessToken    @relation(fields: [jwtAccessTokenId], references: [id])
  jwtAccessTokenId        String            @unique @db.ObjectId
  user                    User              @relation(fields: [userId], references: [id])
  userId                  String            @db.ObjectId
  userLoginAttempt        UserLoginAttempt? @relation(fields: [userLoginAttemptId], references: [id])
  userLoginAttemptId      String?           @unique @db.ObjectId
  parentJwtRefreshToken   JwtRefreshToken?  @relation(name: "parentJwtRefreshToken", fields: [parentJwtRefreshTokenId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentJwtRefreshTokenId String?           @unique @db.ObjectId
  childJwtRefreshToken    JwtRefreshToken?  @relation(name: "parentJwtRefreshToken")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model UserRole {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  assignedAt DateTime @default(now())
  role       Role
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  @@unique([role, userId])
}

enum UserRoleAction {
  ADD
  REMOVE
}

model UserRoleHistory {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  role          Role
  action        UserRoleAction
  triggeredAt   DateTime       @default(now())
  triggeredBy   User           @relation(name: "triggeredBy", fields: [triggeredById], references: [id])
  triggeredById String         @db.ObjectId
  target        User           @relation(name: "target", fields: [targetId], references: [id])
  targetId      String         @db.ObjectId
}
