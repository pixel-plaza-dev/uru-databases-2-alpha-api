// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  email                   String
  secondaryEmail          String?
  username                String                   @unique
  firstName               String
  lastName                String
  password                String
  address                 String?
  phone                   String?
  birthDate               DateTime?
  deleted                 Boolean                  @default(false)
  jwtTokens               JwtToken[]
  roles                   UserRole[]
  usernameHistory         UsernameHistory[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  passwordHistory         PasswordHistory[]
  targetHistory           UserRoleHistory[]        @relation(name: "target")
  triggeredByHistory      UserRoleHistory[]        @relation(name: "triggeredBy")
}

model EmailVerificationToken {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid       String    @unique @default(uuid()) @map("_uuid")
  email      String
  expiresAt  DateTime  @default(now())
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
}

model PasswordResetToken {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid      String    @unique @default(uuid()) @map("_uuid")
  email     String
  expiresAt DateTime  @default(now())
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
}

model UsernameHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
}

model PasswordHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  password   String
  assignedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
}

model JwtTokenData {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt    DateTime  @default(now())
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime  @default(now())
  revokedAt    DateTime?
  accessToken  JwtToken? @relation(name: "refreshTokenData")
  refreshToken JwtToken? @relation(name: "accessTokenData")
}

model JwtToken {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken       String       @unique
  refreshTokenData   JwtTokenData @relation(name: "refreshTokenData", fields: [refreshTokenDataId], references: [id])
  refreshTokenDataId String       @unique @db.ObjectId
  accessToken        String       @unique
  accessTokenData    JwtTokenData @relation(name: "accessTokenData", fields: [accessTokenDataId], references: [id])
  accessTokenDataId  String       @unique @db.ObjectId
  user               User         @relation(fields: [userId], references: [id])
  userId             String       @db.ObjectId
}

enum Role {
  USER
  ADMIN
}

model UserRole {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  assignedAt DateTime @default(now())
  role       Role
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  @@unique([role, userId])
}

enum UserRoleAction {
  ADD
  REMOVE
}

model UserRoleHistory {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  role          Role
  action        UserRoleAction
  triggeredAt   DateTime       @default(now())
  triggeredBy   User           @relation(name: "triggeredBy", fields: [triggeredById], references: [id])
  triggeredById String         @db.ObjectId
  target        User           @relation(name: "target", fields: [targetId], references: [id])
  targetId      String         @db.ObjectId
}
